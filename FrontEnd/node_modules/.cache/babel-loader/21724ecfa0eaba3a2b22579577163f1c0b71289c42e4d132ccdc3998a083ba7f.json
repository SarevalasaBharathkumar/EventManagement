{"ast":null,"code":"// serviceWorkerRegistration.js\n// This file should be in your `src` directory\n\nconst isLocalhost = Boolean(window.location.hostname === 'localhost' || window.location.hostname === '[::1]' || window.location.hostname.match(/^127(?:\\.[0-9]+){0,2}\\.[0-9]+$/));\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n    if (isLocalhost) {\n      checkValidServiceWorker(swUrl, config);\n    } else {\n      registerValidSW(swUrl, config);\n    }\n  }\n}\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker.register(swUrl).then(registration => {\n    registration.onupdateavailable = () => {\n      const waitingServiceWorker = registration.waiting;\n      if (waitingServiceWorker) {\n        waitingServiceWorker.postMessage({\n          type: 'SKIP_WAITING'\n        });\n      }\n    };\n  }).catch(error => {\n    console.error('Error during service worker registration:', error);\n  });\n}\nfunction checkValidServiceWorker(swUrl, config) {\n  fetch(swUrl).then(response => {\n    const contentType = response.headers.get('content-type');\n    if (response.status === 404 || contentType != null && contentType.indexOf('javascript') === -1) {\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister().then(() => {\n          window.location.reload();\n        });\n      });\n    } else {\n      registerValidSW(swUrl, config);\n    }\n  }).catch(() => {\n    console.log('No internet connection found. App is running in offline mode.');\n  });\n}","map":{"version":3,"names":["isLocalhost","Boolean","window","location","hostname","match","register","config","process","env","NODE_ENV","navigator","swUrl","PUBLIC_URL","checkValidServiceWorker","registerValidSW","serviceWorker","then","registration","onupdateavailable","waitingServiceWorker","waiting","postMessage","type","catch","error","console","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","log"],"sources":["/home/rguktrkvalley/rgukt-event-management/src/serviceWorkerRegistration.js"],"sourcesContent":["// serviceWorkerRegistration.js\n// This file should be in your `src` directory\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    window.location.hostname === '[::1]' ||\n    window.location.hostname.match(\n      /^127(?:\\.[0-9]+){0,2}\\.[0-9]+$/\n    )\n  );\n  \n  export function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n      if (isLocalhost) {\n        checkValidServiceWorker(swUrl, config);\n      } else {\n        registerValidSW(swUrl, config);\n      }\n    }\n  }\n  \n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then((registration) => {\n        registration.onupdateavailable = () => {\n          const waitingServiceWorker = registration.waiting;\n          if (waitingServiceWorker) {\n            waitingServiceWorker.postMessage({ type: 'SKIP_WAITING' });\n          }\n        };\n      })\n      .catch((error) => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl, config) {\n    fetch(swUrl)\n      .then((response) => {\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          navigator.serviceWorker.ready.then((registration) => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log('No internet connection found. App is running in offline mode.');\n      });\n  }\n  "],"mappings":"AAAA;AACA;;AAEA,MAAMA,WAAW,GAAGC,OAAO,CACvBC,MAAM,CAACC,QAAQ,CAACC,QAAQ,KAAK,WAAW,IACxCF,MAAM,CAACC,QAAQ,CAACC,QAAQ,KAAK,OAAO,IACpCF,MAAM,CAACC,QAAQ,CAACC,QAAQ,CAACC,KAAK,CAC5B,gCACF,CACF,CAAC;AAED,OAAO,SAASC,QAAQA,CAACC,MAAM,EAAE;EAC/B,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,IAAI,eAAe,IAAIC,SAAS,EAAE;IACzE,MAAMC,KAAK,GAAG,GAAGJ,OAAO,CAACC,GAAG,CAACI,UAAU,oBAAoB;IAE3D,IAAIb,WAAW,EAAE;MACfc,uBAAuB,CAACF,KAAK,EAAEL,MAAM,CAAC;IACxC,CAAC,MAAM;MACLQ,eAAe,CAACH,KAAK,EAAEL,MAAM,CAAC;IAChC;EACF;AACF;AAEA,SAASQ,eAAeA,CAACH,KAAK,EAAEL,MAAM,EAAE;EACtCI,SAAS,CAACK,aAAa,CACpBV,QAAQ,CAACM,KAAK,CAAC,CACfK,IAAI,CAAEC,YAAY,IAAK;IACtBA,YAAY,CAACC,iBAAiB,GAAG,MAAM;MACrC,MAAMC,oBAAoB,GAAGF,YAAY,CAACG,OAAO;MACjD,IAAID,oBAAoB,EAAE;QACxBA,oBAAoB,CAACE,WAAW,CAAC;UAAEC,IAAI,EAAE;QAAe,CAAC,CAAC;MAC5D;IACF,CAAC;EACH,CAAC,CAAC,CACDC,KAAK,CAAEC,KAAK,IAAK;IAChBC,OAAO,CAACD,KAAK,CAAC,2CAA2C,EAAEA,KAAK,CAAC;EACnE,CAAC,CAAC;AACN;AAEA,SAASX,uBAAuBA,CAACF,KAAK,EAAEL,MAAM,EAAE;EAC9CoB,KAAK,CAACf,KAAK,CAAC,CACTK,IAAI,CAAEW,QAAQ,IAAK;IAClB,MAAMC,WAAW,GAAGD,QAAQ,CAACE,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;IACxD,IACEH,QAAQ,CAACI,MAAM,KAAK,GAAG,IACtBH,WAAW,IAAI,IAAI,IAAIA,WAAW,CAACI,OAAO,CAAC,YAAY,CAAC,KAAK,CAAC,CAAE,EACjE;MACAtB,SAAS,CAACK,aAAa,CAACkB,KAAK,CAACjB,IAAI,CAAEC,YAAY,IAAK;QACnDA,YAAY,CAACiB,UAAU,CAAC,CAAC,CAAClB,IAAI,CAAC,MAAM;UACnCf,MAAM,CAACC,QAAQ,CAACiC,MAAM,CAAC,CAAC;QAC1B,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ,CAAC,MAAM;MACLrB,eAAe,CAACH,KAAK,EAAEL,MAAM,CAAC;IAChC;EACF,CAAC,CAAC,CACDiB,KAAK,CAAC,MAAM;IACXE,OAAO,CAACW,GAAG,CAAC,+DAA+D,CAAC;EAC9E,CAAC,CAAC;AACN","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"// routes/createUser.js\nconst express = require('express');\nconst router = express.Router();\nconst User = require('../models/User');\nconst {\n  body,\n  validationResult\n} = require('express-validator');\nconst bcrypt = require('bcryptjs');\nconst sendEmail = require('../services/emailService');\nconst {\n  generateOtp,\n  verifyOtp\n} = require('../services/otpService');\nrouter.post('/createuser', [body('email', 'Please enter a valid email').isEmail(), body('name', 'Name must be at least 5 characters long').isLength({\n  min: 5\n}), body('password', 'Password must be at least 8 characters long').isLength({\n  min: 8\n}), body('password', 'Password must contain at least 1 uppercase letter').matches(/(?=.*[A-Z])/), body('password', 'Password must contain at least 1 digit').matches(/(?=.*[0-9])/), body('password', 'Password must contain at least 1 special character').matches(/(?=.*[@!#$%^&*])/), body('mobileNumber', 'Mobile number is required').not().isEmpty()], async (req, res) => {\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({\n      success: false,\n      errors: errors.array()\n    });\n  }\n  const {\n    name,\n    email,\n    password,\n    mobileNumber,\n    userType,\n    otp\n  } = req.body;\n  if (!otp) {\n    // Send OTP\n    const otpCode = generateOtp(email);\n    try {\n      await sendEmail(email, 'Your OTP Code', `Your OTP code is ${otpCode}`);\n      return res.status(200).json({\n        success: true,\n        message: 'OTP sent to your email'\n      });\n    } catch (err) {\n      console.error('Error:', err.message);\n      return res.status(500).json({\n        success: false,\n        message: 'Error sending OTP'\n      });\n    }\n  }\n\n  // Verify OTP\n  if (!verifyOtp(email, otp)) {\n    return res.status(400).json({\n      success: false,\n      message: 'Invalid OTP'\n    });\n  }\n  try {\n    let user = await User.findOne({\n      email\n    });\n    if (user) {\n      return res.status(400).json({\n        success: false,\n        message: 'User already exists'\n      });\n    }\n    const salt = await bcrypt.genSalt(10);\n    const hashedPassword = await bcrypt.hash(password, salt);\n    user = new User({\n      name,\n      email,\n      password: hashedPassword,\n      mobileNumber,\n      userType\n    });\n    await user.save();\n    res.status(201).json({\n      success: true,\n      message: 'User created successfully'\n    });\n  } catch (err) {\n    console.error('Error:', err.message);\n    res.status(500).json({\n      success: false,\n      message: 'Server Error'\n    });\n  }\n});\nmodule.exports = router;","map":{"version":3,"names":["express","require","router","Router","User","body","validationResult","bcrypt","sendEmail","generateOtp","verifyOtp","post","isEmail","isLength","min","matches","not","isEmpty","req","res","errors","status","json","success","array","name","email","password","mobileNumber","userType","otp","otpCode","message","err","console","error","user","findOne","salt","genSalt","hashedPassword","hash","save","module","exports"],"sources":["/home/rguktrkvalley/rgukt-event-management/src/components/Login.js"],"sourcesContent":["// routes/createUser.js\nconst express = require('express');\nconst router = express.Router();\nconst User = require('../models/User');\nconst { body, validationResult } = require('express-validator');\nconst bcrypt = require('bcryptjs');\nconst sendEmail = require('../services/emailService');\nconst { generateOtp, verifyOtp } = require('../services/otpService');\n\nrouter.post('/createuser', [\n    body('email', 'Please enter a valid email').isEmail(),\n    body('name', 'Name must be at least 5 characters long').isLength({ min: 5 }),\n    body('password', 'Password must be at least 8 characters long').isLength({ min: 8 }),\n    body('password', 'Password must contain at least 1 uppercase letter').matches(/(?=.*[A-Z])/),\n    body('password', 'Password must contain at least 1 digit').matches(/(?=.*[0-9])/),\n    body('password', 'Password must contain at least 1 special character').matches(/(?=.*[@!#$%^&*])/),\n    body('mobileNumber', 'Mobile number is required').not().isEmpty()\n], async (req, res) => {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n        return res.status(400).json({ success: false, errors: errors.array() });\n    }\n\n    const { name, email, password, mobileNumber, userType, otp } = req.body;\n\n    if (!otp) {\n        // Send OTP\n        const otpCode = generateOtp(email);\n        try {\n            await sendEmail(email, 'Your OTP Code', `Your OTP code is ${otpCode}`);\n            return res.status(200).json({ success: true, message: 'OTP sent to your email' });\n        } catch (err) {\n            console.error('Error:', err.message);\n            return res.status(500).json({ success: false, message: 'Error sending OTP' });\n        }\n    }\n\n    // Verify OTP\n    if (!verifyOtp(email, otp)) {\n        return res.status(400).json({ success: false, message: 'Invalid OTP' });\n    }\n\n    try {\n        let user = await User.findOne({ email });\n        if (user) {\n            return res.status(400).json({ success: false, message: 'User already exists' });\n        }\n\n        const salt = await bcrypt.genSalt(10);\n        const hashedPassword = await bcrypt.hash(password, salt);\n\n        user = new User({\n            name,\n            email,\n            password: hashedPassword,\n            mobileNumber,\n            userType\n        });\n\n        await user.save();\n        res.status(201).json({ success: true, message: 'User created successfully' });\n    } catch (err) {\n        console.error('Error:', err.message);\n        res.status(500).json({ success: false, message: 'Server Error' });\n    }\n});\n\nmodule.exports = router;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
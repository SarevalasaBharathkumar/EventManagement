{"ast":null,"code":"// firebase.js //path src\nimport { initializeApp } from \"firebase/app\";\nimport { getMessaging, getToken, onMessage } from 'firebase/messaging'; // https://firebase.google.com/docs/web/setup#available-libraries\nimport axios from 'axios';\n// Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBB4VCDW8XtHsMs-Smh3CyhQC4GBeNqUOw\",\n  authDomain: \"event-management-8c4d4.firebaseapp.com\",\n  projectId: \"event-management-8c4d4\",\n  storageBucket: \"event-management-8c4d4.appspot.com\",\n  messagingSenderId: \"763831488241\",\n  appId: \"1:763831488241:web:393a46c889d7910f6aa350\",\n  measurementId: \"G-L5RD59TYLT\"\n};\nconst generateToken = async () => {\n  try {\n    const permission = await Notification.requestPermission();\n    console.log(permission);\n    if (permission === \"granted\") {\n      const token = await getToken(messaging, {\n        vapidKey: \"BF9Q0ytyvFzr7aZRCqwNQRhYGhTkO9NFZyQDU_FUNQ5rV0jcZ0_hYjjB9yd5CGzFGQrPDLEDSX03K8_FR1d3v6g\"\n      });\n      console.log(token);\n      try {\n        await fetch('/events/saveToken', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            token\n          })\n        });\n        console.log('Token saved to server');\n      } catch (error) {\n        console.error('Error saving token to server:', error);\n      }\n    }\n  } catch (error) {\n    console.error('Error generating token:', error);\n  }\n};\nconst handleForegroundMessages = () => {\n  onMessage(messaging, payload => {\n    console.log('Message received in foreground: ', payload);\n    const {\n      title,\n      body\n    } = payload.notification;\n    new Notification(title, {\n      body\n    });\n  });\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nconst messaging = getMessaging(app);\nexport { messaging, getToken, onMessage, generateToken, handleForegroundMessages };","map":{"version":3,"names":["initializeApp","getMessaging","getToken","onMessage","axios","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","generateToken","permission","Notification","requestPermission","console","log","token","messaging","vapidKey","fetch","method","headers","body","JSON","stringify","error","handleForegroundMessages","payload","title","notification","app"],"sources":["/home/rguktrkvalley/rgukt-event-management/src/firebase.js"],"sourcesContent":["// firebase.js //path src\nimport { initializeApp } from \"firebase/app\";\nimport { getMessaging, getToken, onMessage } from 'firebase/messaging';// https://firebase.google.com/docs/web/setup#available-libraries\nimport axios from 'axios';\n// Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBB4VCDW8XtHsMs-Smh3CyhQC4GBeNqUOw\",\n  authDomain: \"event-management-8c4d4.firebaseapp.com\",\n  projectId: \"event-management-8c4d4\",\n  storageBucket: \"event-management-8c4d4.appspot.com\",\n  messagingSenderId: \"763831488241\",\n  appId: \"1:763831488241:web:393a46c889d7910f6aa350\",\n  measurementId: \"G-L5RD59TYLT\"\n};\n\nconst generateToken = async () => {\n  try {\n      const permission = await Notification.requestPermission();\n      console.log(permission);\n      if(permission===\"granted\"){\n        const token = await getToken(messaging, {\n          vapidKey: \"BF9Q0ytyvFzr7aZRCqwNQRhYGhTkO9NFZyQDU_FUNQ5rV0jcZ0_hYjjB9yd5CGzFGQrPDLEDSX03K8_FR1d3v6g\"\n        });\n        console.log(token);\n        try {\n          await fetch('/events/saveToken', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ token }),\n          });\n          console.log('Token saved to server');\n        } catch (error) {\n          console.error('Error saving token to server:', error);\n        }\n      }\n    }\n  catch(error) {\n    console.error('Error generating token:', error);\n  }\n}\n\nconst handleForegroundMessages = () => {\n  onMessage(messaging, (payload) => {\n    console.log('Message received in foreground: ', payload);\n\n    const { title, body } = payload.notification;\n    new Notification(title, { body });\n  });\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nconst messaging = getMessaging(app);\nexport { messaging, getToken, onMessage, generateToken,handleForegroundMessages };"],"mappings":"AAAA;AACA,SAASA,aAAa,QAAQ,cAAc;AAC5C,SAASC,YAAY,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,oBAAoB,CAAC;AACvE,OAAOC,KAAK,MAAM,OAAO;AACzB;AACA;AACA,MAAMC,cAAc,GAAG;EACrBC,MAAM,EAAE,yCAAyC;EACjDC,UAAU,EAAE,wCAAwC;EACpDC,SAAS,EAAE,wBAAwB;EACnCC,aAAa,EAAE,oCAAoC;EACnDC,iBAAiB,EAAE,cAAc;EACjCC,KAAK,EAAE,2CAA2C;EAClDC,aAAa,EAAE;AACjB,CAAC;AAED,MAAMC,aAAa,GAAG,MAAAA,CAAA,KAAY;EAChC,IAAI;IACA,MAAMC,UAAU,GAAG,MAAMC,YAAY,CAACC,iBAAiB,CAAC,CAAC;IACzDC,OAAO,CAACC,GAAG,CAACJ,UAAU,CAAC;IACvB,IAAGA,UAAU,KAAG,SAAS,EAAC;MACxB,MAAMK,KAAK,GAAG,MAAMjB,QAAQ,CAACkB,SAAS,EAAE;QACtCC,QAAQ,EAAE;MACZ,CAAC,CAAC;MACFJ,OAAO,CAACC,GAAG,CAACC,KAAK,CAAC;MAClB,IAAI;QACF,MAAMG,KAAK,CAAC,mBAAmB,EAAE;UAC/BC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACP,cAAc,EAAE;UAClB,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YAAER;UAAM,CAAC;QAChC,CAAC,CAAC;QACFF,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;MACtC,CAAC,CAAC,OAAOU,KAAK,EAAE;QACdX,OAAO,CAACW,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACvD;IACF;EACF,CAAC,CACH,OAAMA,KAAK,EAAE;IACXX,OAAO,CAACW,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;EACjD;AACF,CAAC;AAED,MAAMC,wBAAwB,GAAGA,CAAA,KAAM;EACrC1B,SAAS,CAACiB,SAAS,EAAGU,OAAO,IAAK;IAChCb,OAAO,CAACC,GAAG,CAAC,kCAAkC,EAAEY,OAAO,CAAC;IAExD,MAAM;MAAEC,KAAK;MAAEN;IAAK,CAAC,GAAGK,OAAO,CAACE,YAAY;IAC5C,IAAIjB,YAAY,CAACgB,KAAK,EAAE;MAAEN;IAAK,CAAC,CAAC;EACnC,CAAC,CAAC;AACJ,CAAC;;AAED;AACA,MAAMQ,GAAG,GAAGjC,aAAa,CAACK,cAAc,CAAC;AACzC,MAAMe,SAAS,GAAGnB,YAAY,CAACgC,GAAG,CAAC;AACnC,SAASb,SAAS,EAAElB,QAAQ,EAAEC,SAAS,EAAEU,aAAa,EAACgB,wBAAwB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { getMessaging, getToken, onMessage } from 'firebase/messaging';\nexport default function swDev() {\n  const vapidPublicKey = \"BF9Q0ytyvFzr7aZRCqwNQRhYGhTkO9NFZyQDU_FUNQ5rV0jcZ0_hYjjB9yd5CGzFGQrPDLEDSX03K8_FR1d3v6g\";\n  const swUrl = `${process.env.PUBLIC_URL}/sw.js`;\n  navigator.serviceWorker.register(swUrl).then(registration => {\n    const messaging = getMessaging();\n    return messaging.getToken({\n      vapidKey: vapidPublicKey,\n      serviceWorkerRegistration: registration\n    }).then(currentToken => {\n      if (currentToken) {\n        console.log('Token generated:', currentToken);\n        // Send the token to your server or use it as needed\n      } else {\n        console.log('No registration token available. Request permission to generate one.');\n      }\n    }).catch(err => {\n      console.log('An error occurred while retrieving token. ', err);\n    });\n  }).catch(err => {\n    console.log('Service worker registration failed:', err);\n  });\n}","map":{"version":3,"names":["getMessaging","getToken","onMessage","swDev","vapidPublicKey","swUrl","process","env","PUBLIC_URL","navigator","serviceWorker","register","then","registration","messaging","vapidKey","serviceWorkerRegistration","currentToken","console","log","catch","err"],"sources":["/home/rguktrkvalley/rgukt-event-management/src/swDev.js"],"sourcesContent":["import { getMessaging, getToken, onMessage } from 'firebase/messaging';\n\nexport default function swDev() {\n    const vapidPublicKey = \"BF9Q0ytyvFzr7aZRCqwNQRhYGhTkO9NFZyQDU_FUNQ5rV0jcZ0_hYjjB9yd5CGzFGQrPDLEDSX03K8_FR1d3v6g\";\n    const swUrl = `${process.env.PUBLIC_URL}/sw.js`;\n\n    navigator.serviceWorker.register(swUrl).then((registration) => {\n        const messaging = getMessaging();\n        return messaging.getToken({\n            vapidKey: vapidPublicKey,\n            serviceWorkerRegistration: registration\n        }).then((currentToken) => {\n            if (currentToken) {\n                console.log('Token generated:', currentToken);\n                // Send the token to your server or use it as needed\n            } else {\n                console.log('No registration token available. Request permission to generate one.');\n            }\n        }).catch((err) => {\n            console.log('An error occurred while retrieving token. ', err);\n        });\n    }).catch((err) => {\n        console.log('Service worker registration failed:', err);\n    });\n}\n"],"mappings":"AAAA,SAASA,YAAY,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,oBAAoB;AAEtE,eAAe,SAASC,KAAKA,CAAA,EAAG;EAC5B,MAAMC,cAAc,GAAG,yFAAyF;EAChH,MAAMC,KAAK,GAAG,GAAGC,OAAO,CAACC,GAAG,CAACC,UAAU,QAAQ;EAE/CC,SAAS,CAACC,aAAa,CAACC,QAAQ,CAACN,KAAK,CAAC,CAACO,IAAI,CAAEC,YAAY,IAAK;IAC3D,MAAMC,SAAS,GAAGd,YAAY,CAAC,CAAC;IAChC,OAAOc,SAAS,CAACb,QAAQ,CAAC;MACtBc,QAAQ,EAAEX,cAAc;MACxBY,yBAAyB,EAAEH;IAC/B,CAAC,CAAC,CAACD,IAAI,CAAEK,YAAY,IAAK;MACtB,IAAIA,YAAY,EAAE;QACdC,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEF,YAAY,CAAC;QAC7C;MACJ,CAAC,MAAM;QACHC,OAAO,CAACC,GAAG,CAAC,sEAAsE,CAAC;MACvF;IACJ,CAAC,CAAC,CAACC,KAAK,CAAEC,GAAG,IAAK;MACdH,OAAO,CAACC,GAAG,CAAC,4CAA4C,EAAEE,GAAG,CAAC;IAClE,CAAC,CAAC;EACN,CAAC,CAAC,CAACD,KAAK,CAAEC,GAAG,IAAK;IACdH,OAAO,CAACC,GAAG,CAAC,qCAAqC,EAAEE,GAAG,CAAC;EAC3D,CAAC,CAAC;AACN","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
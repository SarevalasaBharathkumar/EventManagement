{"ast":null,"code":"var _jsxFileName = \"/home/rguktrkvalley/rgukt-event-management/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport { register as registerServiceWorker } from './serviceWorker';\nimport { getToken } from './firebase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst rootElement = document.getElementById('root');\nconst root = ReactDOM.createRoot(rootElement);\nroot.render(/*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 12,\n  columnNumber: 3\n}, this));\nconst initializeApp = async () => {\n  if ('serviceWorker' in navigator) {\n    const registrations = await navigator.serviceWorker.getRegistrations();\n    if (registrations.length === 0) {\n      await Promise.all(registrations.map(reg => reg.unregister()));\n      await registerServiceWorker();\n    } else {\n      console.log('Service worker already registered:', registrations);\n      // Uncomment the following line to unregister existing service workers before registering a new one\n      // await Promise.all(registrations.map(reg => reg.unregister()));\n    }\n  }\n  try {\n    await getToken(); // Get the FCM token\n  } catch (error) {\n    console.error('Error getting FCM token:', error);\n  }\n};\ninitializeApp().catch(console.error);","map":{"version":3,"names":["React","ReactDOM","App","register","registerServiceWorker","getToken","jsxDEV","_jsxDEV","rootElement","document","getElementById","root","createRoot","render","StrictMode","children","fileName","_jsxFileName","lineNumber","columnNumber","initializeApp","navigator","registrations","serviceWorker","getRegistrations","length","Promise","all","map","reg","unregister","console","log","error","catch"],"sources":["/home/rguktrkvalley/rgukt-event-management/src/index.js"],"sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport { register as registerServiceWorker } from './serviceWorker';\nimport { getToken } from './firebase';\n\nconst rootElement = document.getElementById('root');\nconst root = ReactDOM.createRoot(rootElement);\n\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n\nconst initializeApp = async () => {\n  if ('serviceWorker' in navigator) {\n    const registrations = await navigator.serviceWorker.getRegistrations();\n    if (registrations.length === 0) {\n      await Promise.all(registrations.map(reg => reg.unregister()));\n      await registerServiceWorker();\n    } else {\n      console.log('Service worker already registered:', registrations);\n      // Uncomment the following line to unregister existing service workers before registering a new one\n      // await Promise.all(registrations.map(reg => reg.unregister()));\n    }\n  }\n  try {\n    await getToken(); // Get the FCM token\n  } catch (error) {\n    console.error('Error getting FCM token:', error);\n  }\n};\n\ninitializeApp().catch(console.error);\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,OAAO,aAAa;AACpB,OAAOC,GAAG,MAAM,OAAO;AACvB,SAASC,QAAQ,IAAIC,qBAAqB,QAAQ,iBAAiB;AACnE,SAASC,QAAQ,QAAQ,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtC,MAAMC,WAAW,GAAGC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC;AACnD,MAAMC,IAAI,GAAGV,QAAQ,CAACW,UAAU,CAACJ,WAAW,CAAC;AAE7CG,IAAI,CAACE,MAAM,cACTN,OAAA,CAACP,KAAK,CAACc,UAAU;EAAAC,QAAA,eACfR,OAAA,CAACL,GAAG;IAAAc,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE;AAAC;EAAAH,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OACS,CACpB,CAAC;AAGD,MAAMC,aAAa,GAAG,MAAAA,CAAA,KAAY;EAChC,IAAI,eAAe,IAAIC,SAAS,EAAE;IAChC,MAAMC,aAAa,GAAG,MAAMD,SAAS,CAACE,aAAa,CAACC,gBAAgB,CAAC,CAAC;IACtE,IAAIF,aAAa,CAACG,MAAM,KAAK,CAAC,EAAE;MAC9B,MAAMC,OAAO,CAACC,GAAG,CAACL,aAAa,CAACM,GAAG,CAACC,GAAG,IAAIA,GAAG,CAACC,UAAU,CAAC,CAAC,CAAC,CAAC;MAC7D,MAAM1B,qBAAqB,CAAC,CAAC;IAC/B,CAAC,MAAM;MACL2B,OAAO,CAACC,GAAG,CAAC,oCAAoC,EAAEV,aAAa,CAAC;MAChE;MACA;IACF;EACF;EACA,IAAI;IACF,MAAMjB,QAAQ,CAAC,CAAC,CAAC,CAAC;EACpB,CAAC,CAAC,OAAO4B,KAAK,EAAE;IACdF,OAAO,CAACE,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;EAClD;AACF,CAAC;AAEDb,aAAa,CAAC,CAAC,CAACc,KAAK,CAACH,OAAO,CAACE,KAAK,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import React from'react';import ReactDOM from'react-dom/client';import'./index.css';import App from'./App';import{register as registerServiceWorker}from'./serviceWorker';import{getToken}from'./firebase';import{jsx as _jsx}from\"react/jsx-runtime\";const rootElement=document.getElementById('root');const root=ReactDOM.createRoot(rootElement);root.render(/*#__PURE__*/_jsx(React.StrictMode,{children:/*#__PURE__*/_jsx(App,{})}));const initializeApp=async()=>{if('serviceWorker'in navigator){const registrations=await navigator.serviceWorker.getRegistrations();if(registrations.length===0){await Promise.all(registrations.map(reg=>reg.unregister()));await registerServiceWorker();}else{console.log('Service worker already registered:',registrations);// Uncomment the following line to unregister existing service workers before registering a new one\n// await Promise.all(registrations.map(reg => reg.unregister()));\n}}try{await getToken();// Get the FCM token\n}catch(error){console.error('Error getting FCM token:',error);}};initializeApp().catch(console.error);","map":{"version":3,"names":["React","ReactDOM","App","register","registerServiceWorker","getToken","jsx","_jsx","rootElement","document","getElementById","root","createRoot","render","StrictMode","children","initializeApp","navigator","registrations","serviceWorker","getRegistrations","length","Promise","all","map","reg","unregister","console","log","error","catch"],"sources":["/home/rguktrkvalley/rgukt-event-management/src/index.js"],"sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport { register as registerServiceWorker } from './serviceWorker';\nimport { getToken } from './firebase';\n\nconst rootElement = document.getElementById('root');\nconst root = ReactDOM.createRoot(rootElement);\n\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n\nconst initializeApp = async () => {\n  if ('serviceWorker' in navigator) {\n    const registrations = await navigator.serviceWorker.getRegistrations();\n    if (registrations.length === 0) {\n      await Promise.all(registrations.map(reg => reg.unregister()));\n      await registerServiceWorker();\n    } else {\n      console.log('Service worker already registered:', registrations);\n      // Uncomment the following line to unregister existing service workers before registering a new one\n      // await Promise.all(registrations.map(reg => reg.unregister()));\n    }\n  }\n  try {\n    await getToken(); // Get the FCM token\n  } catch (error) {\n    console.error('Error getting FCM token:', error);\n  }\n};\n\ninitializeApp().catch(console.error);\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,MAAO,CAAAC,QAAQ,KAAM,kBAAkB,CACvC,MAAO,aAAa,CACpB,MAAO,CAAAC,GAAG,KAAM,OAAO,CACvB,OAASC,QAAQ,GAAI,CAAAC,qBAAqB,KAAQ,iBAAiB,CACnE,OAASC,QAAQ,KAAQ,YAAY,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAEtC,KAAM,CAAAC,WAAW,CAAGC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CACnD,KAAM,CAAAC,IAAI,CAAGV,QAAQ,CAACW,UAAU,CAACJ,WAAW,CAAC,CAE7CG,IAAI,CAACE,MAAM,cACTN,IAAA,CAACP,KAAK,CAACc,UAAU,EAAAC,QAAA,cACfR,IAAA,CAACL,GAAG,GAAE,CAAC,CACS,CACpB,CAAC,CAGD,KAAM,CAAAc,aAAa,CAAG,KAAAA,CAAA,GAAY,CAChC,GAAI,eAAe,EAAI,CAAAC,SAAS,CAAE,CAChC,KAAM,CAAAC,aAAa,CAAG,KAAM,CAAAD,SAAS,CAACE,aAAa,CAACC,gBAAgB,CAAC,CAAC,CACtE,GAAIF,aAAa,CAACG,MAAM,GAAK,CAAC,CAAE,CAC9B,KAAM,CAAAC,OAAO,CAACC,GAAG,CAACL,aAAa,CAACM,GAAG,CAACC,GAAG,EAAIA,GAAG,CAACC,UAAU,CAAC,CAAC,CAAC,CAAC,CAC7D,KAAM,CAAAtB,qBAAqB,CAAC,CAAC,CAC/B,CAAC,IAAM,CACLuB,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAEV,aAAa,CAAC,CAChE;AACA;AACF,CACF,CACA,GAAI,CACF,KAAM,CAAAb,QAAQ,CAAC,CAAC,CAAE;AACpB,CAAE,MAAOwB,KAAK,CAAE,CACdF,OAAO,CAACE,KAAK,CAAC,0BAA0B,CAAEA,KAAK,CAAC,CAClD,CACF,CAAC,CAEDb,aAAa,CAAC,CAAC,CAACc,KAAK,CAACH,OAAO,CAACE,KAAK,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}